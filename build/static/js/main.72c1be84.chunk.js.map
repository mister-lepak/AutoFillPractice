{"version":3,"sources":["autofillFunc.js","AutoFill.js","App.js","index.js"],"names":["data","itemList","i","push","faker","commerce","product","random","word","generateFakeData","autoFill","input","dataInput","result","map","e","elementLowerCase","toLowerCase","inputLowerCase","includes","AutoFill","useState","inputValue","setInputValue","list","prev","next","count","setCount","hasMore","setHasMore","slice","current","setCurrent","getMoreData","length","concat","useEffect","type","onChange","target","value","dataLength","loader","id","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMAaMA,EAXmB,WAEvB,IADA,IAAMC,EAAW,GACRC,EAAI,EAAGA,EAAI,IAAOA,IACzBD,EAASE,KAAKC,IAAMC,SAASC,WAE/B,IAAK,IAAIJ,EAAI,EAAGA,EAAI,IAAOA,IACzBD,EAASE,KAAKC,IAAMG,OAAOC,QAE7B,OAAOP,EAGIQ,GA2BEC,EAhBE,SAACC,GAA6B,IAAtBC,EAAqB,uDAATZ,EAC7Ba,EAAS,GACf,MAAc,KAAVF,EACKC,GAETA,EAAUE,KAAI,SAACC,GACb,IAAMC,EAAmBD,EAAEE,cACrBC,EAAiBP,EAAMM,cACzBD,EAAiBG,SAASD,IAC5BL,EAAOV,KAAKY,MAGTF,I,OCqBMO,EArDE,WAAO,IAAD,EACeC,mBAAS,IADxB,mBACdC,EADc,KACFC,EADE,OAEGF,mBAASX,EAASY,IAFrB,mBAEdE,EAFc,aAIKH,mBAAS,CACjCI,KAAM,EACNC,KAAM,MANa,mBAIdC,EAJc,KAIPC,EAJO,OAQSP,oBAAS,GARlB,mBAQdQ,EARc,KAQLC,EARK,OASST,mBAASG,EAAKO,MAAMJ,EAAMF,KAAME,EAAMD,OAT/C,mBASdM,EATc,KASLC,EATK,KAUfC,EAAc,WACdF,EAAQG,SAAWX,EAAKW,QAI5BF,EAAWD,EAAQI,OAAOZ,EAAKO,MAAMJ,EAAMF,KAAO,GAAIE,EAAMD,KAAO,MACnEE,EAAS,CAAEH,KAAME,EAAMF,KAAO,GAAIC,KAAMC,EAAMD,KAAO,MAJnDI,GAAW,IA4Bf,OAJAO,qBAAU,WACRJ,EAAWvB,EAASY,GAAYS,MAAM,EAAGJ,EAAMD,SAC9C,CAACJ,IAGF,qCACE,uBACEgB,KAAK,OACLC,SAAU,SAACxB,GACTQ,EAAcR,EAAEyB,OAAOC,UAxB3B,cAAC,IAAD,CACEC,WAAYV,EAAQG,OACpBT,KAAMQ,EACNL,QAASA,EACTc,OAAQ,4CAJV,SAME,8BACGX,EAAQlB,KAAI,SAACC,EAAG6B,GAAJ,OACX,6BAAK7B,eCvBF8B,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCANC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.72c1be84.chunk.js","sourcesContent":["import faker from \"faker\";\n\nconst generateFakeData = () => {\n  const itemList = [];\n  for (let i = 0; i < 50000; i++) {\n    itemList.push(faker.commerce.product());\n  }\n  for (let i = 0; i < 50000; i++) {\n    itemList.push(faker.random.word());\n  }\n  return itemList;\n};\n\nconst data = generateFakeData();\n\n// const data = [\n//   \"apple\",\n//   \"iPhone\",\n//   \"basketball\",\n//   \"swimming\",\n//   \"orange\",\n//   \"application\",\n// ];\n\nconst autoFill = (input, dataInput = data) => {\n  const result = [];\n  if (input === \"\") {\n    return dataInput;\n  }\n  dataInput.map((e) => {\n    const elementLowerCase = e.toLowerCase();\n    const inputLowerCase = input.toLowerCase();\n    if (elementLowerCase.includes(inputLowerCase)) {\n      result.push(e);\n    }\n  });\n  return result;\n};\n\n// module.exports = autoFill;\nexport default autoFill;\n","import { useEffect, useState } from \"react\";\nimport autoFill from \"./autofillFunc\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nconst AutoFill = () => {\n  const [inputValue, setInputValue] = useState(\"\");\n  const [list, setList] = useState(autoFill(inputValue));\n\n  const [count, setCount] = useState({\n    prev: 0,\n    next: 50,\n  });\n  const [hasMore, setHasMore] = useState(true);\n  const [current, setCurrent] = useState(list.slice(count.prev, count.next));\n  const getMoreData = () => {\n    if (current.length === list.length) {\n      setHasMore(false);\n      return;\n    }\n    setCurrent(current.concat(list.slice(count.prev + 10, count.next + 10)));\n    setCount({ prev: count.prev + 10, next: count.next + 10 });\n  };\n\n  const renderList = () => {\n    return (\n      <InfiniteScroll\n        dataLength={current.length}\n        next={getMoreData}\n        hasMore={hasMore}\n        loader={<h4>Loading...</h4>}\n      >\n        <div>\n          {current.map((e, id) => (\n            <li>{e}</li>\n          ))}\n        </div>\n      </InfiniteScroll>\n    );\n  };\n\n  useEffect(() => {\n    setCurrent(autoFill(inputValue).slice(0, count.next));\n  }, [inputValue]);\n\n  return (\n    <>\n      <input\n        type=\"text\"\n        onChange={(e) => {\n          setInputValue(e.target.value);\n        }}\n      ></input>\n      {renderList()}\n    </>\n  );\n};\n\nexport default AutoFill;\n","import AutoFill from \"./AutoFill\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AutoFill />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}