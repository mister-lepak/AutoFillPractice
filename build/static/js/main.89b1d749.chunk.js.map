{"version":3,"sources":["autofillFunc.js","AutoFill.js","App.js","index.js"],"names":["data","itemList","i","push","faker","commerce","product","random","word","generateFakeData","autoFill","input","dataInput","result","map","e","elementLowerCase","toLowerCase","inputLowerCase","includes","AutoFill","firstRun","useRef","useState","inputValue","setInputValue","list","prev","next","count","setCount","hasMore","setHasMore","slice","current","setCurrent","getMoreData","length","concat","useEffect","className","type","onChange","target","value","dataLength","id","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMAaMA,EAXmB,WAEvB,IADA,IAAMC,EAAW,GACRC,EAAI,EAAGA,EAAI,IAAKA,IACvBD,EAASE,KAAKC,IAAMC,SAASC,WAE/B,IAAK,IAAIJ,EAAI,EAAGA,EAAI,IAAKA,IACvBD,EAASE,KAAKC,IAAMG,OAAOC,QAE7B,OAAOP,EAGIQ,GA2BEC,EAhBE,SAACC,GAA6B,IAAtBC,EAAqB,uDAATZ,EAC7Ba,EAAS,GACf,MAAc,KAAVF,EACKC,GAETA,EAAUE,KAAI,SAACC,GACb,IAAMC,EAAmBD,EAAEE,cACrBC,EAAiBP,EAAMM,cACzBD,EAAiBG,SAASD,IAC5BL,EAAOV,KAAKY,MAGTF,I,OCqCMO,EApEE,WACf,IAAMC,EAAWC,kBAAO,GADH,EAEeC,mBAAS,IAFxB,mBAEdC,EAFc,KAEFC,EAFE,OAGGF,mBAASb,EAASc,IAHrB,mBAGdE,EAHc,aAKKH,mBAAS,CACjCI,KAAM,EACNC,KAAM,MAPa,mBAKdC,EALc,KAKPC,EALO,OASSP,oBAAS,GATlB,mBASdQ,EATc,KASLC,EATK,OAUST,mBAASG,EAAKO,MAAMJ,EAAMF,KAAME,EAAMD,OAV/C,mBAUdM,EAVc,KAULC,EAVK,KAWfC,EAAc,WACdF,EAAQG,SAAWX,EAAKW,QAI5BF,EAAWD,EAAQI,OAAOZ,EAAKO,MAAMJ,EAAMF,KAAO,GAAIE,EAAMD,KAAO,MACnEE,EAAS,CAAEH,KAAME,EAAMF,KAAO,GAAIC,KAAMC,EAAMD,KAAO,MAJnDI,GAAW,IAqCf,OAbAO,qBAAU,WACJlB,EAASa,QACXb,EAASa,SAAU,EAQrBC,EAJmB,KAAfX,EAIOd,EAASc,GAHPd,EAASc,GAAYS,MAAMJ,EAAMF,KAAME,EAAMD,SAIzD,CAACJ,IAGF,sBAAKgB,UAAU,gCAAf,UACE,qBAAKA,UAAU,MAAf,SACE,oBAAIA,UAAU,YAAd,uCAEF,qBAAKA,UAAU,MAAf,SACE,uBACEC,KAAK,OACLC,SAAU,SAAC3B,GACTU,EAAcV,EAAE4B,OAAOC,YAI7B,qBAAKJ,UAAU,MAAf,SAzCA,cAAC,IAAD,CACEK,WAAYX,EAAQG,OACpBT,KAAMQ,EACNL,QAASA,EAHX,SAME,8BACGG,EAAQpB,KAAI,SAACC,EAAG+B,GAAJ,OACX,8BAAM/B,iBCzBHgC,MARf,WACE,OACE,qBAAKP,UAAU,MAAf,SACE,cAAC,EAAD,OCANQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.89b1d749.chunk.js","sourcesContent":["import faker from \"faker\";\n\nconst generateFakeData = () => {\n  const itemList = [];\n  for (let i = 0; i < 500; i++) {\n    itemList.push(faker.commerce.product());\n  }\n  for (let i = 0; i < 500; i++) {\n    itemList.push(faker.random.word());\n  }\n  return itemList;\n};\n\nconst data = generateFakeData();\n\n// const data = [\n//   \"apple\",\n//   \"iPhone\",\n//   \"basketball\",\n//   \"swimming\",\n//   \"orange\",\n//   \"application\",\n// ];\n\nconst autoFill = (input, dataInput = data) => {\n  const result = [];\n  if (input === \"\") {\n    return dataInput;\n  }\n  dataInput.map((e) => {\n    const elementLowerCase = e.toLowerCase();\n    const inputLowerCase = input.toLowerCase();\n    if (elementLowerCase.includes(inputLowerCase)) {\n      result.push(e);\n    }\n  });\n  return result;\n};\n\n// module.exports = autoFill;\nexport default autoFill;\n","import { useEffect, useState, useRef } from \"react\";\nimport autoFill from \"./autofillFunc\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { unstable_renderSubtreeIntoContainer } from \"react-dom\";\n\nconst AutoFill = () => {\n  const firstRun = useRef(true);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [list, setList] = useState(autoFill(inputValue));\n\n  const [count, setCount] = useState({\n    prev: 0,\n    next: 50,\n  });\n  const [hasMore, setHasMore] = useState(true);\n  const [current, setCurrent] = useState(list.slice(count.prev, count.next));\n  const getMoreData = () => {\n    if (current.length === list.length) {\n      setHasMore(false);\n      return;\n    }\n    setCurrent(current.concat(list.slice(count.prev + 10, count.next + 10)));\n    setCount({ prev: count.prev + 10, next: count.next + 10 });\n  };\n\n  const renderList = () => {\n    return (\n      <InfiniteScroll\n        dataLength={current.length}\n        next={getMoreData}\n        hasMore={hasMore}\n        // loader={<h4>Loading...</h4>}\n      >\n        <div>\n          {current.map((e, id) => (\n            <div>{e}</div>\n          ))}\n        </div>\n      </InfiniteScroll>\n    );\n  };\n\n  useEffect(() => {\n    if (firstRun.current) {\n      firstRun.current = false;\n      return;\n    }\n\n    if (inputValue === \"\") {\n      setCurrent(autoFill(inputValue).slice(count.prev, count.next));\n      return;\n    }\n    setCurrent(autoFill(inputValue));\n  }, [inputValue]);\n\n  return (\n    <div className=\"ui three column centered grid\">\n      <div className=\"row\">\n        <h1 className=\"ui header\">AutoFilter for AutoFill</h1>\n      </div>\n      <div className=\"row\">\n        <input\n          type=\"text\"\n          onChange={(e) => {\n            setInputValue(e.target.value);\n          }}\n        ></input>\n      </div>\n      <div className=\"row\">{renderList()}</div>\n    </div>\n  );\n};\n\nexport default AutoFill;\n","import AutoFill from \"./AutoFill\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AutoFill />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}